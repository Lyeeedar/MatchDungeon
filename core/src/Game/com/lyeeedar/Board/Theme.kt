package com.lyeeedar.Board

import com.badlogic.gdx.utils.Array
import com.badlogic.gdx.utils.ObjectMap
import com.lyeeedar.Renderables.Sprite.Sprite
import com.lyeeedar.Renderables.Sprite.SpriteWrapper
import com.lyeeedar.Util.*
import com.lyeeedar.Util.AssetManager
import java.util.*
import ktx.collections.set

@DataFile(colour = "114,182,240", icon = "Sprites/Oryx/uf_split/uf_terrain/crate.png")
@DataClass(name = "Theme")
class ThemeData : XmlDataClass()
{
	@NeedsLocalisation(file = "Theme")
	@DataValue(dataName = "Name")
	lateinit var nameID: String
	
	lateinit var floor: SpriteWrapper
	lateinit var wall: SpriteWrapper
	lateinit var pit: SpriteWrapper
	
	lateinit var chestFull: Sprite
	lateinit var chestEmpty: Sprite
	lateinit var coin: Sprite
	lateinit var plate: Sprite
	
	@DataValue(dataName = "Block")
	@DataArray(minCount = 1)
	val blockSprites: Array<Sprite> = Array()
	
	@DataValue(dataName = "Seal")
	@DataArray(minCount = 1)
	val sealSprites: Array<Sprite> = Array()
	
	@DataValue(dataName = "Shield")
	@DataArray(minCount = 1)
	val shieldSprites: Array<Sprite> = Array()
	
	@DataValue(dataName = "SpawnWeights")
	@DataArray(minCount = 1)
	val spawnList: Array<SpawnTypeAndWeight> = Array()
	
	@DataArray(minCount = 1)
	@FileReference(basePath = "Factions", resourceType = "Faction")
	val factions: Array<String> = Array()
	
	@FileReference(basePath = "Sprites", allowedFileTypes = "png")
	lateinit var backgroundTile: String

	override fun load(xmlData: XmlData)
	{
	/* Autogenerated method contents. Do not modify. */
		nameID = xmlData.get("Name")
		floor = AssetManager.loadSpriteWrapper(xmlData.getChildByName("Floor")!!)
		wall = AssetManager.loadSpriteWrapper(xmlData.getChildByName("Wall")!!)
		pit = AssetManager.loadSpriteWrapper(xmlData.getChildByName("Pit")!!)
		chestFull = AssetManager.loadSprite(xmlData.getChildByName("ChestFull")!!)
		chestEmpty = AssetManager.loadSprite(xmlData.getChildByName("ChestEmpty")!!)
		coin = AssetManager.loadSprite(xmlData.getChildByName("Coin")!!)
		plate = AssetManager.loadSprite(xmlData.getChildByName("Plate")!!)
		val blockSpritesEl = xmlData.getChildByName("Block")!!
		for (el in blockSpritesEl.children)
		{
			val obj = AssetManager.loadSprite(el)
			blockSprites.add(obj)
		}
		val sealSpritesEl = xmlData.getChildByName("Seal")!!
		for (el in sealSpritesEl.children)
		{
			val obj = AssetManager.loadSprite(el)
			sealSprites.add(obj)
		}
		val shieldSpritesEl = xmlData.getChildByName("Shield")!!
		for (el in shieldSpritesEl.children)
		{
			val obj = AssetManager.loadSprite(el)
			shieldSprites.add(obj)
		}
		val spawnListEl = xmlData.getChildByName("SpawnWeights")!!
		for (el in spawnListEl.children)
		{
			val obj = SpawnTypeAndWeight()
			obj.load(el)
			spawnList.add(obj)
		}
		val factionsEl = xmlData.getChildByName("Factions")!!
		for (el in factionsEl.children)
		{
			factions.add(el.text)
		}
		backgroundTile = xmlData.get("BackgroundTile")
	}
}

enum class SpawnType
{
	ORB,
	CHANGER,
	ATTACK,
	SHIELD,
	SUMMON,
	NAMEDORB1,
	NAMEDORB2,
	NAMEDORB3,
	NAMEDORB4,
	NAMEDORB5
}
class SpawnTypeAndWeight : XmlDataClass()
{
	lateinit var type: SpawnType
	var weight: Int = 1

	override fun load(xmlData: XmlData)
	{
	/* Autogenerated method contents. Do not modify. */
		type = SpawnType.valueOf(xmlData.get("Type").toUpperCase(Locale.ENGLISH))
		weight = xmlData.getInt("Weight", 1)
	}
}

class Theme(val path: String, val data: ThemeData)
{
	companion object
	{
		val loadedThemes = ObjectMap<String, Theme>()

		fun load(path: String): Theme
		{
			if (loadedThemes.containsKey(path))
			{
				return loadedThemes[path]
			}

			val xml = getXml(path)
			val data = ThemeData()
			data.load(xml)

			val theme = Theme(path, data)
			loadedThemes[path] = theme

			return theme
		}
	}
}
package com.lyeeedar.Board

import com.badlogic.gdx.utils.Array
import com.badlogic.gdx.utils.ObjectMap
import com.lyeeedar.Renderables.Sprite.Sprite
import com.lyeeedar.Renderables.Sprite.SpriteWrapper
import com.lyeeedar.Util.*
import com.lyeeedar.Util.AssetManager
import ktx.collections.set

@DataFile(colour = "114,182,240", icon = "Sprites/Oryx/uf_split/uf_terrain/crate.png")
@DataClass(name = "Theme")
class ThemeData : XmlDataClass()
{
	@NeedsLocalisation(file = "Theme")
	@DataValue(dataName = "Name")
	lateinit var nameID: String
	
	lateinit var floor: SpriteWrapper
	lateinit var wall: SpriteWrapper
	lateinit var pit: SpriteWrapper
	
	lateinit var chestFull: Sprite
	lateinit var chestEmpty: Sprite
	lateinit var coin: Sprite
	lateinit var plate: Sprite
	
	@DataValue(dataName = "Block")
	@DataArray(minCount = 1)
	val blockSprites: Array<Sprite> = Array<Sprite>()
	
	@DataValue(dataName = "Seal")
	@DataArray(minCount = 1)
	val sealSprites: Array<Sprite> = Array<Sprite>()
	
	@DataValue(dataName = "Shield")
	@DataArray(minCount = 1)
	val shieldSprites: Array<Sprite> = Array<Sprite>()
	
	@DataValue(dataName = "SpawnWeights")
	@DataArray(minCount = 1)
	val spawnList: Array<String> = Array<String>()
	
	@DataArray(minCount = 1)
	@FileReference(basePath = "Factions", resourceType = "Faction")
	val factions: Array<String> = Array<String>()
	
	@FileReference(basePath = "Sprites", allowedFileTypes = "png")
	lateinit var backgroundTile: String

	override fun load(xmlData: XmlData)
	{
	/* Autogenerated method contents. Do not modify. */
		nameID = xmlData.get("Name")
		floor = AssetManager.loadSpriteWrapper(xmlData.getChildByName("Floor")!!)
		wall = AssetManager.loadSpriteWrapper(xmlData.getChildByName("Wall")!!)
		pit = AssetManager.loadSpriteWrapper(xmlData.getChildByName("Pit")!!)
		chestFull = AssetManager.loadSprite(xmlData.getChildByName("ChestFull")!!)
		chestEmpty = AssetManager.loadSprite(xmlData.getChildByName("ChestEmpty")!!)
		coin = AssetManager.loadSprite(xmlData.getChildByName("Coin")!!)
		plate = AssetManager.loadSprite(xmlData.getChildByName("Plate")!!)
		val blockSpritesEl = xmlData.getChildByName("Block")!!
		for (el in blockSpritesEl.children)
		{
			val obj = AssetManager.loadSprite(el)
			blockSprites.add(obj)
		}
		val sealSpritesEl = xmlData.getChildByName("Seal")!!
		for (el in sealSpritesEl.children)
		{
			val obj = AssetManager.loadSprite(el)
			sealSprites.add(obj)
		}
		val shieldSpritesEl = xmlData.getChildByName("Shield")!!
		for (el in shieldSpritesEl.children)
		{
			val obj = AssetManager.loadSprite(el)
			shieldSprites.add(obj)
		}
		val spawnListEl = xmlData.getChildByName("SpawnWeights")!!
		for (el in spawnListEl.children)
		{
			spawnList.add(el.text)
		}
		val factionsEl = xmlData.getChildByName("Factions")!!
		for (el in factionsEl.children)
		{
			factions.add(el.text)
		}
		backgroundTile = xmlData.get("BackgroundTile")
	}
}

class Theme(val path: String)
{
	lateinit var nameID: String

	lateinit var floor: SpriteWrapper
	lateinit var wall: SpriteWrapper
	lateinit var pit: SpriteWrapper

	lateinit var chestFull: Sprite
	lateinit var chestEmpty: Sprite
	lateinit var coin: Sprite
	lateinit var plate: Sprite
	val blockSprites = Array<Sprite>()
	val sealSprites = Array<Sprite>()
	val shieldSprites = Array<Sprite>()

	lateinit var backgroundTile: String

	val spawnList = Array<String>()

	val factions = Array<String>()

	companion object
	{
		val loadedThemes = ObjectMap<String, Theme>()

		fun load(path: String): Theme
		{
			if (loadedThemes.containsKey(path))
			{
				return loadedThemes[path]
			}

			val xml = getXml(path)
			val theme = Theme(path)

			theme.nameID = xml.get("Name")

			theme.floor = SpriteWrapper.load(xml.getChildByName("Floor")!!)
			theme.wall = SpriteWrapper.load(xml.getChildByName("Wall")!!)
			theme.pit = SpriteWrapper.load(xml.getChildByName("Pit")!!)

			val chestEl = xml.getChildByName("Chest")!!
			theme.chestFull = AssetManager.loadSprite(chestEl.getChildByName("Full")!!)
			theme.chestEmpty = AssetManager.loadSprite(chestEl.getChildByName("Empty")!!)
			theme.coin = AssetManager.loadSprite(xml.getChildByName("Coin")!!)
			theme.plate = AssetManager.loadSprite(xml.getChildByName("Plate")!!)

			val blockEls = xml.getChildByName("Block")!!
			for (i in 0 until blockEls.childCount)
			{
				theme.blockSprites.add(AssetManager.loadSprite(blockEls.getChild(i)))
			}

			val sealEls = xml.getChildByName("Seal")!!
			for (i in 0 until sealEls.childCount)
			{
				theme.sealSprites.add(AssetManager.loadSprite(sealEls.getChild(i)))
			}

			val shieldEls = xml.getChildByName("Shield")!!
			for (i in 0 until shieldEls.childCount)
			{
				theme.shieldSprites.add(AssetManager.loadSprite(shieldEls.getChild(i)))
			}

			val spawnsEl = xml.getChildByName("SpawnWeights")
			if (spawnsEl != null)
			{
				for (el in spawnsEl.children)
				{
					val split = el.text.split(",")

					for (i in 0 until split[1].toInt())
					{
						theme.spawnList.add(split[0])
					}
				}
			}
			else
			{
				theme.spawnList.add("Orb")
			}

			val factionsEl = xml.getChildByName("Factions")
			if (factionsEl != null)
			{
				for (el in factionsEl.children)
				{
					theme.factions.add(el.text)
				}
			}

			theme.backgroundTile = xml.get("BackgroundTile")

			loadedThemes[path] = theme

			return theme
		}
	}
}
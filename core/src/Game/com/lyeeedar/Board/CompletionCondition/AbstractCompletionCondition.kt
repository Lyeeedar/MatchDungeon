package com.lyeeedar.Board.CompletionCondition

import com.badlogic.gdx.scenes.scene2d.ui.Table
import com.lyeeedar.Board.Grid
import com.lyeeedar.Util.DataClass
import com.lyeeedar.Util.XmlData
import com.lyeeedar.Util.XmlDataClass

@DataClass(name = "CompletionCondition", global = true)
abstract class AbstractCompletionConditionData : XmlDataClass()
{
	abstract val classID: String

	override fun load(xmlData: XmlData)
	{
	/* Autogenerated method contents. Do not modify. */
	}

	companion object
	{
		fun loadPolymorphicClass(classID: String): AbstractCompletionConditionData
		{
		/* Autogenerated method contents. Do not modify. */
			return when (classID)
			{
				"Matches" -> CompletionConditionMatchesData()
				"Time" -> CompletionConditionTimeData()
				"Kill" -> CompletionConditionKillData()
				"Plate" -> CompletionConditionPlateData()
				"Sink" -> CompletionConditionSinkData()
				"None" -> CompletionConditionNoneData()
				"Turns" -> CompletionConditionTurnsData()
				"CustomOrb" -> CompletionConditionCustomOrbData()
				"Break" -> CompletionConditionBreakData()
				"Die" -> CompletionConditionDieData()
				else -> throw RuntimeException("Unknown classID '$classID' for AbstractCompletionConditionData!")
			}
		}
	}
}

abstract class AbstractCompletionCondition<T: AbstractCompletionConditionData>(val data: T)
{
	abstract fun attachHandlers(grid: Grid)
	abstract fun isCompleted(): Boolean
	abstract fun createTable(grid: Grid): Table
	abstract fun getDescription(grid: Grid): Table

	companion object
	{
		fun load(xml: XmlData): AbstractCompletionCondition<*>
		{
			val data = AbstractCompletionConditionData.loadPolymorphicClass(xml.get("classID"))
			data.load(xml)

			val obj = get(data)
			return obj
		}

		private fun get(data: AbstractCompletionConditionData): AbstractCompletionCondition<*>
		{
			val instance = when(data.classID)
			{
				"None" -> CompletionConditionNone(data as CompletionConditionNoneData)

			// Defeat
				"Die" -> CompletionConditionDie(data as CompletionConditionDieData)
				"Turns" -> CompletionConditionTurns(data as CompletionConditionTurnsData)
				"Time" -> CompletionConditionTime(data as CompletionConditionTimeData)

			// Victory
				"Kill" -> CompletionConditionKill(data as CompletionConditionKillData)
				"Matches" -> CompletionConditionMatches(data as CompletionConditionMatchesData)
				"Sink" -> CompletionConditionSink(data as CompletionConditionSinkData)
				"Plate" -> CompletionConditionPlate(data as CompletionConditionPlateData)
				"CustomOrb" -> CompletionConditionCustomOrb(data as CompletionConditionCustomOrbData)
				"Break" -> CompletionConditionBreak(data as CompletionConditionBreakData)

			// ARGH everything broke
				else -> throw RuntimeException("Invalid completion condition type: ${data.classID}")
			}

			return instance
		}
	}
}